ignoreGeneratedHeader = false
severity = "error"
confidence = 0.8
errorCode = 0
warningCode = 0

# By convention, context.Context should be the first parameter of a function.
# This rule spots function declarations that do not follow the convention.
[rule.context-as-argument]

# Basic types should not be used as a key in context.WithValue
[rule.context-keys-type]

# Importing with . makes the programs much harder to understand because
# it is unclear whether names belong to the current package or to an imported package.
[rule.dot-imports]

# By convention, for the sake of readability, the errors should be last in the list of returned values by a function.
[rule.error-return]

# By convention, for better readability, error messages should not be capitalized or end with punctuation or a newline.
[rule.error-strings]

# Checking if an error is nil to just after return the error or nil is redundant.
[rule.if-return]

# By convention, for better readability, incrementing an integer variable by 1 is recommended to be done using
# the ++ operator. This rule spots expressions like i += 1 and i -= 1 and proposes to change them into i++ and i--.
[rule.increment-decrement]

# This rule warns when variable or package naming conventions are not followed.
[rule.var-naming]

# This rule suggests a shorter way of writing ranges that do not use the second value.
[rule.range]

# By convention, receiver names in a method should reflect their identity.
# For example, if the receiver is of type Parts, p is an adequate name for it.
[rule.receiver-naming]

# Using unit-specific suffix like "Secs", "Mins", ... when naming variables of type time.Duration can be
# misleading, this rule highlights those cases.
[rule.time-naming]

# This rule warns when an exported function or method returns a value of an un-exported type.
[rule.unexported-return]

# To improve the readability of code, it is recommended to reduce the indentation as much as possible. This rule
# highlights redundant else-blocks that can be eliminated from the code.
[rule.indent-error-flow]

# It is possible to get a simpler program by replacing errors.New(fmt.Sprintf()) with fmt.Errorf().
# This rule spots that kind of simplification opportunities.
[rule.errorf]

# Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
[rule.empty-block]

# To improve the readability of code, it is recommended to reduce the indentation as much as possible.
# This rule highlights redundant else-blocks that can be eliminated from the code.
[rule.superfluous-else]

# This rule warns on unused parameters. Functions or methods with unused parameters
# can be a symptom of an unfinished refactoring or a bug.
[rule.unused-parameter]

# This rule spots and proposes to remove unreachable code.
[rule.unreachable-code]

# Constant names like false, true, nil, function names like append, make, and basic type names like bool, and byte are
# not reserved words of the language; therefore the can be redefined. Even if possible, redefining these built in names
# can lead to bugs very difficult to detect.
[rule.redefines-builtin-id]

# Exported function and methods should have comments. This warns on undocumented exported functions and methods.
[rule.exported]

# This rule proposes simplifications of variable declarations.
[rule.var-declaration]

# Check for commonly mistaken usages of the sync/atomic package
[rule.atomic]

# Warns in the presence of code lines longer than a configured maximum.
[rule.line-length-limit]
    Arguments = [121]

# By convention, for the sake of readability, variables of type error must be named with the prefix err.
[rule.error-naming]

# This rule suggests to remove redundant statements like a break at the end of a case block, for improving
# the code's readability.
[rule.unnecessary-stmt]

# Sometimes gofmt is not enough to enforce a common formatting of a code-base;
# this rule warns when there are heading or trailing newlines in code blocks.
[rule.empty-lines]

# This rule warns on unused method receivers. Methods with unused receivers
# can be a symptom of an unfinished refactoring or a bug.
[rule.unused-receiver]

# Cyclomatic complexity is a measure of code complexity. Enforcing a maximum complexity
# per function helps to keep code readable and maintainable.
[rule.cyclomatic]
    Arguments = [5]

# Packages should have comments. This rule warns on undocumented packages
# and when packages comments are detached to the package keyword.
[rule.package-comments]

